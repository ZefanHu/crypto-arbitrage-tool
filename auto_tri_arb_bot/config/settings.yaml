# auto_tri_arb_bot/config/settings.yaml

# 交易所配置
exchange:
  name: "okx" # 交易所名称
  simulated: true # 是否使用模拟盘，对于OKX，这通常通过API密钥区分，但这里可以作为内部标志
  # WebSocket 和 REST API 的基础 URL (根据OKX文档填写，模拟盘和实盘URL不同)
  # 例如: wss://ws.okx.com:8443/ws/v5/public (实盘公共)
  #       wss://wspap.okx.com:8443/ws/v5/public?brokerId=9999 (模拟盘公共)
  #       https://www.okx.com (实盘REST)
  #       https://www.okx.com/api/v5/ (实盘REST API前缀)
  #       https://www.okx.com/priapi/v5/ (实盘REST私有API前缀)
  #       https://www.okx.com/pap/api/v5/ (模拟盘REST API前缀)
  #       https://www.okx.com/pap/priapi/v5/ (模拟盘REST私有API前缀)
  websocket_base_url_public: "wss://wspap.okx.com:8443/ws/v5/public?brokerId=9999" # 模拟盘公共频道
  websocket_base_url_private: "wss://wspap.okx.com:8443/ws/v5/private?brokerId=9999" # 模拟盘私有频道
  rest_api_base_url: "https://www.okx.com" # 模拟盘和实盘的域名通常一致，路径不同
  # rest_api_prefix: "/pap/api/v5" # 模拟盘API路径前缀 (根据实际情况调整)
  # rest_api_private_prefix: "/pap/priapi/v5" # 模拟盘私有API路径前缀

# 套利策略配置
arbitrage:
  # 定义三角套利的币种和顺序，例如 USDT -> BTC -> ETH -> USDT
  # 这里我们用你简历中提到的 USDT, USD, BTC，但OKX上直接的USD交易对可能不常见，通常是稳定币如USDC或法币通道
  # 假设我们用 USDT, BTC, ETH (更常见)
  # 路径1: USDT -> BTC -> ETH -> USDT
  # 路径2: USDT -> ETH -> BTC -> USDT
  # 你需要根据OKX上实际存在的、流动性好的交易对来配置
  # 例如：交易对 "BTC-USDT", "ETH-BTC", "ETH-USDT"
  # 货币资产: ['USDT', 'BTC', 'ETH']
  # 交易路径 (每个元素是一个三元组，代表一个交易步骤：[源货币, 目标货币, 交易对symbol])
  # 注意：这里的交易对symbol需要是OKX交易所的实际symbol
  # 示例：USDT -> BTC (买入BTC卖出USDT，交易对BTC-USDT，操作是买BTC)
  #       BTC -> ETH (买入ETH卖出BTC，交易对ETH-BTC，操作是买ETH)
  #       ETH -> USDT (卖出ETH买入USDT，交易对ETH-USDT，操作是卖ETH)
  # 确保这些交易对在OKX上存在且活跃
  # 以简历中的 USDT, USD, BTC 为例，假设OKX有 BTC-USDT, BTC-USD, USD-USDT (这只是假设，你需要核实)
  # 路径1 (正向): USDT -> USD -> BTC -> USDT
  #   - USDT -> USD (交易对 USD-USDT, 买入USD)
  #   - USD  -> BTC (交易对 BTC-USD, 买入BTC)
  #   - BTC  -> USDT (交易对 BTC-USDT, 卖出BTC)
  # 路径2 (反向): USDT -> BTC -> USD -> USDT
  #   - USDT -> BTC (交易对 BTC-USDT, 买入BTC)
  #   - BTC  -> USD (交易对 BTC-USD, 卖出USD) # 注意这里是卖出USD得到BTC，还是卖出BTC得到USD，取决于交易对定义
  #   - USD  -> USDT (交易对 USD-USDT, 卖出USD)
  #
  # 简化为只关注核心币种，具体交易对在代码中根据币种组合生成或硬编码
  core_currencies: ["USDT", "BTC", "ETH"] # 示例，请替换为你的目标币种
  # 具体的交易对，用于获取行情和执行交易
  # 这些交易对应该能构成三角关系
  # 例如: 对于 USDT, BTC, ETH
  # trading_pairs:
  #   - "BTC-USDT"
  #   - "ETH-BTC"
  #   - "ETH-USDT"
  # 你需要根据 `core_currencies` 和交易所实际情况定义
  # 我们先留空，让程序动态发现或在代码中定义
  # trading_pairs_for_triangle:
  #   - { pair: "BTC-USDT", base_ccy: "BTC", quote_ccy: "USDT" }
  #   - { pair: "ETH-BTC", base_ccy: "ETH", quote_ccy: "BTC" }
  #   - { pair: "ETH-USDT", base_ccy: "ETH", quote_ccy: "USDT" }

  min_profit_threshold: 0.002 # 最小利润阈值 (例如 0.2%)
  fee_rate: 0.001 # 每笔交易的手续费率 (例如 0.1%)
  # 初始用于套利的每种货币的数量或总USDT价值
  # 例如，每次套利动用约 10 USDT 等值的资产
  trade_amount_usdt: 10.0 # 每次套利循环中，第一步交易投入的USDT等值数量

# 风险控制
risk_management:
  max_single_trade_usd_value: 100 # 单笔交易最大USD价值 (用于限制下单量)
  max_position_ratio: 0.5 # 单个币种最大持仓占总资产比例 (更复杂，初期可简化)
  slippage_tolerance: 0.001 # 滑点容忍度 (例如 0.1%)
  emergency_stop_loss_threshold: -0.05 # 紧急止损阈值 (例如亏损5%则停止)
  max_consecutive_losses: 5 # 最大连续亏损次数，达到则暂停

# 日志配置
logging:
  level: "INFO" # DEBUG, INFO, WARNING, ERROR, CRITICAL
  file: "logs/arb_bot.log" # 日志文件路径 (确保logs目录存在或程序创建)
  max_bytes: 10485760 # 10MB
  backup_count: 5

# WebSocket 订阅频道
# OKX频道示例:
# 'tickers', 'books' (订单簿), 'trades' (成交数据)
# 'account', 'orders', 'positions' (私有频道)
websocket_channels:
  public:
    # - channel: "tickers"
    #   instType: "SPOT" # SPOT, SWAP, FUTURES, OPTION
    #   instId: "BTC-USDT" # 交易对
    - channel: "books" # 推荐使用订单簿数据
      instType: "SPOT"
      # instId 将由代码根据交易对列表动态填充
    - channel: "trades"
      instType: "SPOT"
      # instId 将由代码根据交易对列表动态填充
  private:
    - channel: "account" # 账户余额变化
      ccy: "" # 订阅所有币种或指定币种
    - channel: "orders" # 订单更新
      instType: "SPOT" # 或 ANY
      # instId: "" # 订阅所有交易对或指定

# 其他参数
other:
  heartbeat_interval: 25 # WebSocket 心跳间隔 (秒)
  max_api_retries: 3
  api_retry_delay: 5 # 秒

